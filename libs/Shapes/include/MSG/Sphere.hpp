#pragma once

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include <glm/geometric.hpp>
#include <glm/mat4x4.hpp>
#include <glm/vec3.hpp>

////////////////////////////////////////////////////////////////////////////////
// Forward Declarations
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class Declarations
////////////////////////////////////////////////////////////////////////////////
namespace Msg {
class Sphere {
public:
    Sphere() = default;
    Sphere(const glm::vec3& a_Center, const float& a_Radius);
    glm::vec3 center = { 0.f, 0.f, 0.f };
    float radius     = 0.f;
    float Distance(const glm::vec3& a_Position, const glm::mat4x4& a_TransformMatrix = { 1.f }) const;
    bool IsInf() const { return glm::isinf(radius); }
    glm::vec3 Min() const { return center - glm::vec3(radius); }
    glm::vec3 Max() const { return center + glm::vec3(radius); }
};
}
