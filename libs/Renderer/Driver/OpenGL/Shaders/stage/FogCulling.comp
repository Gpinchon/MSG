#include <Bindings.glsl>
#include <Camera.glsl>
#include <Lights.glsl>
#include <Fog.glsl>
#include <VTFSLightSampling.glsl>
#include <FwdLights.glsl>
#include <FrameInfo.glsl>

layout(
    local_size_x = FOG_WIDTH / FOG_WORKGROUPS,
    local_size_y = FOG_HEIGHT / FOG_WORKGROUPS,
    local_size_z = FOG_DEPTH / FOG_WORKGROUPS) in;

layout(binding = UBO_FRAME_INFO) uniform FrameInfoBlock
{
    FrameInfo u_FrameInfo;
};
layout(binding = UBO_CAMERA) uniform CameraBlock
{
    Camera u_Camera;
};

layout(binding = 0) uniform sampler3D u_Density;
layout(binding = 0, rgba8) restrict writeonly uniform image3D img_Result;

void main()
{
    const mat4x4 VP       = u_Camera.projection * u_Camera.view;
    const mat4x4 invVP    = inverse(VP);
    const vec3 resultSize = vec3(FOG_WIDTH, FOG_HEIGHT, FOG_DEPTH);

    const vec3 fragCoord   = gl_GlobalInvocationID + vec3(0.5f);
    const vec3 uv          = vec3(fragCoord.xy / resultSize.xy, pow(fragCoord.z / resultSize.z, 1 / FOG_DEPTH_EXP));
    const vec3 NDCPos      = uv * 2.f - 1.f;
    const vec4 projPos     = (invVP * vec4(NDCPos, 1));
    const vec3 worldPos    = projPos.xyz / projPos.w;
    const vec3 vtfsColor   = GetVTFSLightColor(worldPos, NDCPos);
    const vec3 shadColor   = GetShadowLightColor(worldPos, ivec3(fragCoord.xy, u_FrameInfo.frameIndex));
    const vec3 iblColor    = GetIBLColor(worldPos);
    const vec3 lightColor  = vtfsColor + shadColor + iblColor;
    const float fogOpacity = 1 + max(0, compMax(lightColor) - 1);
    const vec4 fogColor    = texture(u_Density, uv) * vec4(lightColor, fogOpacity);
    imageStore(img_Result, ivec3(fragCoord), saturate(fogColor));
}
