#include <Bicubic.glsl>
#include <Bindings.glsl>
#include <Camera.glsl>
#include <Fog.glsl>
#include <FrameInfo.glsl>
#include <Functions.glsl>
#include <Random.glsl>

layout(
    local_size_x = FOG_INTEGRATION_WORKGROUPS_X,
    local_size_y = FOG_INTEGRATION_WORKGROUPS_Y,
    local_size_z = 1) in;

layout(binding = UBO_FRAME_INFO) uniform FrameInfoBlock
{
    FrameInfo u_FrameInfo;
};
layout(binding = UBO_FOG_CAMERA) uniform CameraBlock
{
    Camera u_Camera;
    Camera u_Camera_Previous;
};
layout(binding = UBO_FOG_SETTINGS) uniform FogSettingsBlock
{
    FogSettings u_FogSettings;
};

layout(binding = 0) uniform sampler3D u_ScatteringExtinction;
layout(binding = 1) uniform sampler3D u_DensityNoise;
layout(binding = 2) uniform sampler3D u_Result_Prev;
layout(binding = 3) uniform sampler3D u_PreviousCascade;
layout(binding = 0, rgba16f) restrict writeonly uniform image3D img_Result;

float BeerLaw(IN(float) a_Density, IN(float) a_StepSize)
{
    return exp(-a_Density * a_StepSize);
}

float BeerLaw(IN(float) a_Density)
{
    return BeerLaw(a_Density, 1);
}

vec4 AccumulateScattering(IN(vec4) a_Front, IN(vec4) a_Back)
{
    vec3 light = a_Front.rgb + saturate(exp(-a_Front.a)) * a_Back.rgb;
    return vec4(light, a_Front.a + a_Back.a);
}

vec3 GetWorldPos(IN(vec2) a_UV, IN(float) a_Depth)
{
    const mat4x4 invVP = inverse(u_Camera.projection * u_Camera.view);
    const vec3 uv      = vec3(a_UV, a_Depth);
    const vec3 NDCPos  = uv * 2.f - 1.f;
    const vec4 projPos = (invVP * vec4(NDCPos, 1));
    return projPos.xyz / projPos.w;
}

vec4 FogScatteredExtinction(IN(vec3) a_UVW, IN(vec3) a_WorldPos, IN(float) a_WorldDistToCam)
{
    const vec3 densityUV                 = (a_WorldPos + u_FogSettings.noiseDensityOffset) * u_FogSettings.noiseDensityScale;
    const float densityNoiseOffset       = (1 - u_FogSettings.noiseDensityIntensity);
    const float densityNoiseAtt          = max(u_FogSettings.noiseDensityMaxDist, a_WorldDistToCam) / u_FogSettings.noiseDensityMaxDist;
    const float densityNoise             = densityNoiseAtt * (texture(u_DensityNoise, densityUV)[0] + densityNoiseOffset);
    const vec4 sliceScatteringExtinction = textureBicubic(u_ScatteringExtinction, a_UVW);
    return vec4(sliceScatteringExtinction.rgb, sliceScatteringExtinction.a * densityNoise);
}

void main()
{
    const mat4x4 VP_Prev    = u_Camera_Previous.projection * u_Camera_Previous.view;
    const mat4x4 VP         = u_Camera.projection * u_Camera.view;
    const mat4x4 invVP      = inverse(VP);
    const mat4x4 invVP_Prev = inverse(VP_Prev);
    const vec3 resultSize   = textureSize(u_ScatteringExtinction, 0);
    const vec3 pixelSize    = 1.f / resultSize;

    vec3 texCoord           = vec3(gl_GlobalInvocationID.xy, 0) + 0.5f;
    vec3 uvw                = texCoord * pixelSize;
    const vec3 NDC          = FogNDCFromUVW(uvw, u_FogSettings.depthExponant);
    const vec4 projStartPos = invVP * vec4(NDC, 1);
    vec3 worldPos           = projStartPos.xyz / projStartPos.w;

    const vec4 prevCascade   = texture(u_PreviousCascade, vec3(uvw.xy, 1));
    float worldDist          = distance(u_Camera.position, worldPos);
    vec3 accumScattering     = prevCascade.rgb;
    float accumTransmittance = prevCascade.a;
    while (texCoord.z < resultSize.z) {
        const vec3 texCoordNext   = vec3(texCoord.xy, texCoord.z + 1);
        const vec3 uvwNext        = texCoordNext * pixelSize;
        const vec3 NDCNext        = FogNDCFromUVW(uvwNext, u_FogSettings.depthExponant);
        const vec4 clipPos        = invVP * vec4(NDCNext, 1);
        const vec3 worldPosNext   = clipPos.xyz / clipPos.w;
        const float worldStepSize = distance(worldPos, worldPosNext);
        worldDist += worldStepSize;

        const vec4 sliceScatteringExtinction = FogScatteredExtinction(uvw, worldPos, worldDist);
        const vec3 sliceScattering           = sliceScatteringExtinction.rgb;
        const float sliceExtinction          = max(sliceScatteringExtinction.a, 0.0000001f);
        const float sliceTransmittance       = BeerLaw(sliceExtinction, worldStepSize);
        const vec3 sliceScatteringIntegral   = sliceScattering * (1 - sliceTransmittance) / sliceExtinction;
        accumScattering += sliceScatteringIntegral * accumTransmittance;
        accumTransmittance *= sliceTransmittance;

        vec4 out_Color = vec4(accumScattering, accumTransmittance);
        {
            vec4 clipPos_Prev     = VP_Prev * vec4(worldPos, 1);
            const vec3 NDC_Prev   = clipPos_Prev.xyz / clipPos_Prev.w;
            const vec3 UVW_Prev   = FogUVWFromNDC(NDC_Prev, u_FogSettings.depthExponant);
            const vec4 color_Prev = texture(u_Result_Prev, UVW_Prev);
            if (all(greaterThanEqual(UVW_Prev, vec3(0))) && all(lessThanEqual(UVW_Prev, vec3(1))))
                out_Color = mix(out_Color, color_Prev, 0.95f);
        }
        imageStore(img_Result, ivec3(texCoord), out_Color);
        worldPos = worldPosNext;
        uvw      = uvwNext;
        texCoord.z++;
    }
}
