#pragma once

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include <MSG/PO/Vertex.hpp>

#include <array>

////////////////////////////////////////////////////////////////////////////////
// Forward declarations
////////////////////////////////////////////////////////////////////////////////
namespace MSG::PO {
class Pair;
}

////////////////////////////////////////////////////////////////////////////////
// Class declaration
////////////////////////////////////////////////////////////////////////////////
namespace std {
template <typename T>
struct hash;
template <>
struct hash<MSG::PO::Pair> {
    size_t operator()(MSG::PO::Pair const& a_Pair) const;
};
}

namespace MSG::PO {
class Pair {
public:
    Pair() = default;
    Pair(const uint64_t& a_V0, const uint64_t& a_V1);
    bool operator==(const Pair& a_Lhs) const;
    std::array<uint64_t, 2> vertice = { uint64_t(-1), uint64_t(-1) };
    mutable bool edge               = false;
    mutable double contractionCost  = 0;
    mutable glm::vec3 target        = {};
};
}
